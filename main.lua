---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Немо.
--- DateTime: 18.12.2022 16:48
---

local N = 20
------------------------------------------------------------------------------------------------------------------------
local f_n = {
    100, 420, 570, 710, 865, 1030, 1220, 1410, 1600, 1780, 1960, 2140, 2320, 2550, 2900, 3300, 3660, 4050, 5010, 7250
}
local f_v = {
    420, 570, 710, 865, 1030, 1220, 1410, 1600, 1780, 1960, 2140, 2320, 2550, 2900, 3300, 3660, 4050, 5010, 7250, 10000
}
local f = {}
local function fill_F()
    for i = 1, N do
        f[i] = math.sqrt(f_v[i] * f_n[i])
    end
end
------------------------------------------------------------------------------------------------------------------------
local dA = {}
local function fill_dA()
    local function y(x)
        if x <= 1000 then
            return 200 / (x ^ 0.43) - 0.37
        else
            return 1.37 + 1000 / (x ^ 0.69)
        end
    end
    for i = 1, N do
        dA[i] = y(f[i])
    end
end
------------------------------------------------------------------------------------------------------------------------
local function count_L(L0, S, R, d)
    return L0 + 10 * math.log(S, 10) - R - d
end
local Ls
------------------------------------------------------------------------------------------------------------------------
local Lh
------------------------------------------------------------------------------------------------------------------------
local q = {}
local function fill_q()
    for i = 1, N do
        q[i] = Ls - Lh[i]
    end
end
------------------------------------------------------------------------------------------------------------------------
local Q = {}
local function fill_Q()
    for i = 1, N do
        Q[i] = q[i] - dA[i]
    end
end
------------------------------------------------------------------------------------------------------------------------
local k = {}
local function fill_k()
    local function y(x)
        if 100 <= x and x <= 400 then
            return 2.57 * 10 ^ (-8) * x ^ 2.4
        elseif 400 < x and x <= 10000 then
            return 1 - 1.074 * math.exp(-10 ^ (-4) * x ^ 1.18)
        end
    end
    for i = 1, N do
        k[i] = y(f_v[i]) - y(f_n[i])
    end
end
------------------------------------------------------------------------------------------------------------------------
local p = {}
local function fill_p()
    local function y(x)
        if x <= 0 then
            return (0.78 + 5.46 * math.exp(-4.3 * 10 ^ (-3) * (27.3 - math.abs(x)) ^ 2)) / (1 + 10 ^ (0.1 * math.abs(x)))
        else
            return 1 - (0.78 + 5.46 * math.exp(-4.3 * 10 ^ (-3) * (27.3 - math.abs(x)) ^ 2)) / (1 + 10 ^ (0.1 * math.abs(x)))
        end
    end
    for i = 1, N do
        p[i] = y(Q[i])
    end
end
------------------------------------------------------------------------------------------------------------------------
local function count_R()
    local sum = 0
    for i = 1, N do
        sum = sum + p[i] * k[i]
    end
    return sum
end
------------------------------------------------------------------------------------------------------------------------
local function count_S(R)
    if R <= 0.15 then
        return 4 * R ^ 1.43
    elseif 0.15 < R and R <= 0.7 then
        return 1.1 * (1 - 1.17 * math.exp(-2.9 * R))
    else
        return 1.01 * (1 - 9.1 * math.exp(-6.9 * R))
    end
end
------------------------------------------------------------------------------------------------------------------------
local function count_W(R)
    if R < 0.15 then
        return 1.54 * R ^ 0.25 * (1 - math.exp(-11 * R))
    else
        return 1 - math.exp(-11 * R / (1 + 0.7 * R))
    end
end
------------------------------------------------------------------------------------------------------------------------
local function count_W_S(S)
    return 1.05 * (1 - math.exp(-6.15 * S / (1 + S)))
end
------------------------------------------------------------------------------------------------------------------------
local function fill_Lh()
    print('Lш (уровень шума, Дб):')
    print("'1': высокий, '2': средний, '3': низкий")
    local lh = io.read()
    if lh == '1' then
        Lh = { 75, 73, 72, 74, 71, 70, 71, 69, 68, 68, 69, 68, 68, 67, 65, 64, 63, 61, 65, 63 }
    elseif lh == '2' then
        Lh = { 45, 45, 45, 46, 46, 47, 48, 50, 51, 52, 54, 56, 56, 57, 58, 56, 57, 58, 59, 60 }
    else
        Lh = { 31, 35, 32, 30, 31, 32, 32, 30, 31, 32, 33, 37, 36, 31, 32, 33, 36, 35, 32, 33 }
    end
end
------------------------------------------------------------------------------------------------------------------------
local function enter_and_Count()
    print('L0 (уровень шума до преграды, Дб):')
    local L0 = io.read()
    print('Sп (площадь препятствия, м^2):')
    local Sp = io.read()
    print('Rш (изоляция воздушного шума, Дб):')
    local Rh = io.read()
    print('d (поправка, Дб):')
    local d = io.read()
    
    Ls = count_L(L0, Sp, Rh, d)
    
    print('Параметры вычислений:')
    print('                     L0 = ' .. L0 .. ' (Дб)')
    print('                     Sп = ' .. Sp .. ' (м^2)')
    print('                     Rш = ' .. Rh .. ' (Дб)')
    print('                      d = ' .. d .. ' (Дб)')
    print('                 ==> Lс = ' .. string.format('%5.2f', Ls) .. ' (Дб)\n')
    
    fill_Lh()
    
    fill_F()
    fill_dA()
    fill_q()
    fill_Q()
    fill_k()
    fill_p()
    
    print('|--------|------|-------|----------|-------|-------|-----|--------|--------|------|--------------|--------------|')
    print('| номер  |  fн, |   fв, |   fср,   |  dA,  |  Lс,  | Lш, |   qi,  |   Qi,  |  ki  |      pi      |      Ri      |')
    print('| полосы |  Гц  |   Гц  |    Гц    |   дБ  |   дБ  |  дБ |   дБ   |   дБ   | 0--1 |     0--1     |     0--1     |')
    print('|--------|------|-------|----------|-------|-------|-----|--------|--------|------|--------------|--------------|')
    for i = 1, N do
        io.write('|' .. string.format('%5d', i) .. '   |')
        io.write(string.format('%5d', f_n[i]) .. ' |')
        io.write(string.format('%6d', f_v[i]) .. ' |')
        io.write(string.format('%9.3f', f[i]) .. ' |')
        io.write(string.format('%6.2f', dA[i]) .. ' |')
        io.write(string.format('%6.2f', Ls) .. ' |')
        io.write(string.format('%4d', Lh[i]) .. ' |')
        io.write(string.format('%7.2f', q[i]) .. ' |')
        io.write(string.format('%7.2f', Q[i]) .. ' |')
        io.write(string.format('%5.2f', k[i]) .. ' |')
        io.write(string.format('%13.10f', p[i]) .. ' |')
        io.write(string.format('%13.10f', k[i] * p[i]) .. ' |')
        io.write('\n')
    end
    print('|--------|------|-------|----------|-------|-------|-----|--------|--------|------|--------------|--------------|')
    
    local R = count_R()
    local S = count_S(R)
    local W = count_W(R)
    local W_S = count_W_S(S)
    local prW = W_S * 100
    print()
    print('|--------------|--------------|--------------|--------------|-------|')
    print('|       R      |     S(R)     |     W(R)     |     W(S)     |  W(S) |')
    print('|      0-1     |     0--1     |     0--1     |     0--1     |   %   |')
    print('|--------------|--------------|--------------|--------------|-------|')
    io.write('|' .. string.format('%13.10f', R))
    io.write(' |' .. string.format('%13.10f', S))
    io.write(' |' .. string.format('%13.10f', W))
    io.write(' |' .. string.format('%13.10f', W_S))
    io.write(' |' .. string.format('%6.2f', prW) .. ' |')
    io.write('\n')
    print('|--------------|--------------|--------------|--------------|-------|')
end

local function start()
    print('\n<=== Метод Покровского ===>\n')
    while true do
        print("\n'1': входные данные\n'2': завершить работу")
        local ch = io.read()
        if ch == '1' then
            enter_and_Count()
        else
            break
        end
    end
end

start()